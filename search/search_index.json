{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Grape Docs Welcome to grape documentation and coder good practices. We are leaving some links, our productive process description, UI standards code snippets, NET Core CRUD code snippets and more. All Must Read and Watch this Sets of videos of uncle bob about considerations of how to code, better than any Netflix production, you should watch this!. https://www.youtube.com/playlist?list=PLmmYSbUCWJ4x1GO839azG_BBw8rkh-zOj","title":"Home"},{"location":"#grape-docs","text":"Welcome to grape documentation and coder good practices. We are leaving some links, our productive process description, UI standards code snippets, NET Core CRUD code snippets and more.","title":"Grape Docs"},{"location":"#all-must-read-and-watch-this","text":"Sets of videos of uncle bob about considerations of how to code, better than any Netflix production, you should watch this!. https://www.youtube.com/playlist?list=PLmmYSbUCWJ4x1GO839azG_BBw8rkh-zOj","title":"All Must Read and Watch this"},{"location":"hidden/","text":"Github Pages configuring git submodule add -b main https://github.com/grape-software/grape-software.github.io.git git add grape-software.github.io git commit -m \"add github page submodule\" git push Build or update Execute in grape-software.github.io folder mkdocs gh-deploy --config-file ../mkdocs.yml --remote-branch main","title":"Github Pages configuring"},{"location":"hidden/#github-pages-configuring","text":"git submodule add -b main https://github.com/grape-software/grape-software.github.io.git git add grape-software.github.io git commit -m \"add github page submodule\" git push","title":"Github Pages configuring"},{"location":"hidden/#build-or-update","text":"Execute in grape-software.github.io folder mkdocs gh-deploy --config-file ../mkdocs.yml --remote-branch main","title":"Build or update"},{"location":"semantic-release/","text":"Grape use of Semantic Release All developers should use this specifications. Commit Message Format https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-format This specification is inspired by and supersedes the [AngularJS commit message format][commit-message-format]. We have very precise rules over how our Git commit messages must be formatted. This format leads to easier to read commit history . Each commit message consists of a header , a body , and a footer . <header> <BLANK LINE> <body> <BLANK LINE> <footer> The header is mandatory and must conform to the Commit Message Header format. The body is mandatory for all commits except for those of type \"docs\". When the body is present it must be at least 20 characters long and must conform to the Commit Message Body format. The footer is optional. The Commit Message Footer format describes what the footer is used for and the structure it must have. Commit Message Header <type>(<scope>): <short summary> \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Summary in present tense. Not capitalized. No period at the end. \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Commit Scope: animations|bazel|benchpress|common|compiler|compiler-cli|core| \u2502 elements|forms|http|language-service|localize|platform-browser| \u2502 platform-browser-dynamic|platform-server|router|service-worker| \u2502 upgrade|zone.js|packaging|changelog|docs-infra|migrations|ngcc|ve| \u2502 devtools \u2502 \u2514\u2500\u2af8 Commit Type: build|ci|docs|feat|fix|perf|refactor|test The <type> and <summary> fields are mandatory, the (<scope>) field is optional. Type Must be one of the following: build : Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm) ci : Changes to our CI configuration files and scripts (examples: CircleCi, SauceLabs) docs : Documentation only changes feat : A new feature fix : A bug fix perf : A code change that improves performance refactor : A code change that neither fixes a bug nor adds a feature test : Adding missing tests or correcting existing tests","title":"Grape use of Semantic Release"},{"location":"semantic-release/#grape-use-of-semantic-release","text":"All developers should use this specifications.","title":"Grape use of Semantic Release"},{"location":"semantic-release/#commit-message-format","text":"https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-format This specification is inspired by and supersedes the [AngularJS commit message format][commit-message-format]. We have very precise rules over how our Git commit messages must be formatted. This format leads to easier to read commit history . Each commit message consists of a header , a body , and a footer . <header> <BLANK LINE> <body> <BLANK LINE> <footer> The header is mandatory and must conform to the Commit Message Header format. The body is mandatory for all commits except for those of type \"docs\". When the body is present it must be at least 20 characters long and must conform to the Commit Message Body format. The footer is optional. The Commit Message Footer format describes what the footer is used for and the structure it must have.","title":" Commit Message Format"},{"location":"semantic-release/#commit-message-header","text":"<type>(<scope>): <short summary> \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Summary in present tense. Not capitalized. No period at the end. \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Commit Scope: animations|bazel|benchpress|common|compiler|compiler-cli|core| \u2502 elements|forms|http|language-service|localize|platform-browser| \u2502 platform-browser-dynamic|platform-server|router|service-worker| \u2502 upgrade|zone.js|packaging|changelog|docs-infra|migrations|ngcc|ve| \u2502 devtools \u2502 \u2514\u2500\u2af8 Commit Type: build|ci|docs|feat|fix|perf|refactor|test The <type> and <summary> fields are mandatory, the (<scope>) field is optional.","title":"Commit Message Header"},{"location":"semantic-release/#type","text":"Must be one of the following: build : Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm) ci : Changes to our CI configuration files and scripts (examples: CircleCi, SauceLabs) docs : Documentation only changes feat : A new feature fix : A bug fix perf : A code change that improves performance refactor : A code change that neither fixes a bug nor adds a feature test : Adding missing tests or correcting existing tests","title":"Type"},{"location":"working/","text":"Working on Grape Projects On boarding to dev team Before a dev can work with Grape Projects should be enable in our Tools. For that reason we need to send and email to admin@grape.com.ar with the following information: Mail to add in Dev Ops Github Account to add in repos Sign NDA Defines role in Dev Team (Frontend, Mobile, Backend, UX Designer or Full stack) Tools we use We use Azure DevOps Boards for daily task, user stories or features, It's help us to define priorities on all differents projects. Our source code is in Github private repos. We have differents Organizations for main projects or customers and inside each Organization we work on his specific repos. We code mainly with vs code and azure data studio. Also, in some cases we use visual studio for older project in asp.net or wpf for windows. Task Assignation We usually meet daily in the morning to assign task and define priorities for a day or two. Task are assingned in DevOps with estimated hours, if for some reason task is taking more than estimation time developer should notify user story responsable and wait for an answer working in another task. When description of task is confuse or incomplete dev could start a work item discussion with user story responsable or other team member to clarify. Once a dev has correct specification and task understanding must activate task so others team members knows this task is taken. To start working in code dev should start a branch asociated with is user, work item id and some short description. ie: fruizar/144-improve-import. Mainly base branch colud be dev but in some cases when a fix is needed on production environment main o master branch should be use as base, in that case PR should be done to main and dev. Submitting and Closing Tasks After task is done following Coding standarizations and good practices dev should close task indicating Completed time hours in work item. If some consideration about task execution is needed dev should write it in work item discussion. Dev also need to make a pull request in Github indication who must Review the code, usually is user story responsable or team leader. In PR description Work item URL should be write and other considerations dev wants to tell reviewer. Code standarization Grape has snippets for most common user stories on differents languages, dev should install it from https://github.com/grape-software/docs/tree/main/snippets and use it when starting a standar task. Dev could improve this snippets modyfing or adding new ones, all should start with gr-en-DESCRIPTION, making a Pull Request in docs repository. Standard Angular UI Search Module Is used like a menu where user can work with some part of business making most common operations: Search with filters or advances filters Add, edit or remove Export or Import Defines record by page Order results Access to related lists View resume information en footer Make some business specific actions Add or edit operations could be on Popup, when little inputs needs to be fill, or with navigation in other case. Remove operations are confirmed in Popup in same search screen. Asociated Lists User access some part of business throw search module and then needs to work with related records ie. Headers and Details objects. This UI try to solve operations related with asociated list of object business. User could: View Header with Parent Record Resume Information and back icon See paged list Defines record by page Order results Add, edit or remove Make some business specific actions Add, edit and remove operations are in Popup in this UI unless specified differently in the task. CU Components Create or Update Components are Form Angular components that allows to add or edit a database record in some cases with a complex transaction that writes in multiple entities. Must have client simple domain logic validation for each input. ie. max, number, dates, select validations. Raising user friendly backend messages. Stepper UI Stepper allows complex transactions to be made in simple steps for the user and send a whole transactions POST to backend. Step component could be in own stepper or a reusing existing component. Automplete Each time a user needs to select a record with a big number of records or with multi attributes to look for should be implemented as a autocomplete component for reuse. This component has only input in html and binding a calculate field calls fullName implemented in Class to search for as Not Mapped. Standard Backend CRUD operations SEARCH Allows to make searchs for Search UI with common filters implemented in searchText, custom based specific attribute for custom SearchX class inherited from SearchModel. Set number of records for page and order by any object attribute. Implements onlyActive attribute to get active records in each business model. Returns a dynamic object with totalCount with all records, res array with a list of business object to search for and a search object with all attributes passed to search API. API is /{controller} C# Snippet gr-en-search GET Allows to make a get for an specific business object with all his first level related entities and in some cases including more than first level. Returns all attributes of business object with included entities. API is /{controller}/{id} C# Snippet gr-en-get-id POST Allows to make a call to insert a record o a record with related in one transaction to the database. All business validation to get consistency should be done in this method. C# Snippet gr-en-post PUT Allows to make a call to insert a record o a record with related in one transaction to the database. All business validation to get consistency should be done in this method. Working with Audits component changes should be done with db.Entry(oldObject).CurrentValues.SetValues(record); C# Snippet gr-en-put DELETE Deletes remove entity from database, some business use cases should implement logical deleted with an database update instead phisically delete record. In some cases it must record to trash table whole object in json format. C# Sinppet gr-en-delete AUTOCOMPLETE Search in database for automplete typeahead input objects and should returns fullName (calculated not mapped field) and business primary key. C# Snippet gr-en-autocomplete Coding good practices API Comments Should explain what API does and what validation it have. Swagger All public method should be marked as [ApiExplorerSettings(IgnoreApi = true)] to work with swagger. Before push code backend /docs must be checked in order to validate OpenAPI docs is working. Vs Code Configuration C Format on Save Lint? Extensions: Omnisharp C# C# xml Documentation Comments (Keisuke Kato) RestClient (Huachao Mao) Angular Format on Save Extensions: Angular Essentials (Jhon Papa) Angular Lanfuage Service Prettier ESLint sort-imports (VSC Sort Import) Commit Message Format https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-format This specification is inspired by and supersedes the [AngularJS commit message format][commit-message-format]. We have very precise rules over how our Git commit messages must be formatted. This format leads to easier to read commit history . Each commit message consists of a header , a body , and a footer . <header> <BLANK LINE> <body> <BLANK LINE> <footer> The header is mandatory and must conform to the Commit Message Header format. The body is mandatory for all commits except for those of type \"docs\". When the body is present it must be at least 20 characters long and must conform to the Commit Message Body format. The footer is optional. The Commit Message Footer format describes what the footer is used for and the structure it must have. Commit Message Header <type>(<scope>): <short summary> \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Summary in present tense. Not capitalized. No period at the end. \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Commit Scope: animations|bazel|benchpress|common|compiler|compiler-cli|core| \u2502 elements|forms|http|language-service|localize|platform-browser| \u2502 platform-browser-dynamic|platform-server|router|service-worker| \u2502 upgrade|zone.js|packaging|changelog|docs-infra|migrations|ngcc|ve| \u2502 devtools \u2502 \u2514\u2500\u2af8 Commit Type: build|ci|docs|feat|fix|perf|refactor|test The <type> and <summary> fields are mandatory, the (<scope>) field is optional. Type Must be one of the following: build : Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm) ci : Changes to our CI configuration files and scripts (examples: CircleCi, SauceLabs) docs : Documentation only changes feat : A new feature fix : A bug fix perf : A code change that improves performance refactor : A code change that neither fixes a bug nor adds a feature test : Adding missing tests or correcting existing tests","title":"Working"},{"location":"working/#working-on-grape-projects","text":"","title":"Working on Grape Projects"},{"location":"working/#on-boarding-to-dev-team","text":"Before a dev can work with Grape Projects should be enable in our Tools. For that reason we need to send and email to admin@grape.com.ar with the following information: Mail to add in Dev Ops Github Account to add in repos Sign NDA Defines role in Dev Team (Frontend, Mobile, Backend, UX Designer or Full stack)","title":"On boarding to dev team"},{"location":"working/#tools-we-use","text":"We use Azure DevOps Boards for daily task, user stories or features, It's help us to define priorities on all differents projects. Our source code is in Github private repos. We have differents Organizations for main projects or customers and inside each Organization we work on his specific repos. We code mainly with vs code and azure data studio. Also, in some cases we use visual studio for older project in asp.net or wpf for windows.","title":"Tools we use"},{"location":"working/#task-assignation","text":"We usually meet daily in the morning to assign task and define priorities for a day or two. Task are assingned in DevOps with estimated hours, if for some reason task is taking more than estimation time developer should notify user story responsable and wait for an answer working in another task. When description of task is confuse or incomplete dev could start a work item discussion with user story responsable or other team member to clarify. Once a dev has correct specification and task understanding must activate task so others team members knows this task is taken. To start working in code dev should start a branch asociated with is user, work item id and some short description. ie: fruizar/144-improve-import. Mainly base branch colud be dev but in some cases when a fix is needed on production environment main o master branch should be use as base, in that case PR should be done to main and dev.","title":"Task Assignation"},{"location":"working/#submitting-and-closing-tasks","text":"After task is done following Coding standarizations and good practices dev should close task indicating Completed time hours in work item. If some consideration about task execution is needed dev should write it in work item discussion. Dev also need to make a pull request in Github indication who must Review the code, usually is user story responsable or team leader. In PR description Work item URL should be write and other considerations dev wants to tell reviewer.","title":"Submitting and Closing Tasks"},{"location":"working/#code-standarization","text":"Grape has snippets for most common user stories on differents languages, dev should install it from https://github.com/grape-software/docs/tree/main/snippets and use it when starting a standar task. Dev could improve this snippets modyfing or adding new ones, all should start with gr-en-DESCRIPTION, making a Pull Request in docs repository.","title":"Code standarization"},{"location":"working/#standard-angular-ui","text":"","title":"Standard Angular UI"},{"location":"working/#search-module","text":"Is used like a menu where user can work with some part of business making most common operations: Search with filters or advances filters Add, edit or remove Export or Import Defines record by page Order results Access to related lists View resume information en footer Make some business specific actions Add or edit operations could be on Popup, when little inputs needs to be fill, or with navigation in other case. Remove operations are confirmed in Popup in same search screen.","title":"Search Module"},{"location":"working/#asociated-lists","text":"User access some part of business throw search module and then needs to work with related records ie. Headers and Details objects. This UI try to solve operations related with asociated list of object business. User could: View Header with Parent Record Resume Information and back icon See paged list Defines record by page Order results Add, edit or remove Make some business specific actions Add, edit and remove operations are in Popup in this UI unless specified differently in the task.","title":"Asociated Lists"},{"location":"working/#cu-components","text":"Create or Update Components are Form Angular components that allows to add or edit a database record in some cases with a complex transaction that writes in multiple entities. Must have client simple domain logic validation for each input. ie. max, number, dates, select validations. Raising user friendly backend messages.","title":"CU Components"},{"location":"working/#stepper-ui","text":"Stepper allows complex transactions to be made in simple steps for the user and send a whole transactions POST to backend. Step component could be in own stepper or a reusing existing component.","title":"Stepper UI"},{"location":"working/#automplete","text":"Each time a user needs to select a record with a big number of records or with multi attributes to look for should be implemented as a autocomplete component for reuse. This component has only input in html and binding a calculate field calls fullName implemented in Class to search for as Not Mapped.","title":"Automplete"},{"location":"working/#standard-backend-crud-operations","text":"","title":"Standard Backend CRUD operations"},{"location":"working/#search","text":"Allows to make searchs for Search UI with common filters implemented in searchText, custom based specific attribute for custom SearchX class inherited from SearchModel. Set number of records for page and order by any object attribute. Implements onlyActive attribute to get active records in each business model. Returns a dynamic object with totalCount with all records, res array with a list of business object to search for and a search object with all attributes passed to search API. API is /{controller} C# Snippet gr-en-search","title":"SEARCH"},{"location":"working/#get","text":"Allows to make a get for an specific business object with all his first level related entities and in some cases including more than first level. Returns all attributes of business object with included entities. API is /{controller}/{id} C# Snippet gr-en-get-id","title":"GET"},{"location":"working/#post","text":"Allows to make a call to insert a record o a record with related in one transaction to the database. All business validation to get consistency should be done in this method. C# Snippet gr-en-post","title":"POST"},{"location":"working/#put","text":"Allows to make a call to insert a record o a record with related in one transaction to the database. All business validation to get consistency should be done in this method. Working with Audits component changes should be done with db.Entry(oldObject).CurrentValues.SetValues(record); C# Snippet gr-en-put","title":"PUT"},{"location":"working/#delete","text":"Deletes remove entity from database, some business use cases should implement logical deleted with an database update instead phisically delete record. In some cases it must record to trash table whole object in json format. C# Sinppet gr-en-delete","title":"DELETE"},{"location":"working/#autocomplete","text":"Search in database for automplete typeahead input objects and should returns fullName (calculated not mapped field) and business primary key. C# Snippet gr-en-autocomplete","title":"AUTOCOMPLETE"},{"location":"working/#coding-good-practices","text":"","title":"Coding good practices"},{"location":"working/#api-comments","text":"Should explain what API does and what validation it have.","title":"API Comments"},{"location":"working/#swagger","text":"All public method should be marked as [ApiExplorerSettings(IgnoreApi = true)] to work with swagger. Before push code backend /docs must be checked in order to validate OpenAPI docs is working.","title":"Swagger"},{"location":"working/#vs-code-configuration","text":"","title":"Vs Code Configuration"},{"location":"working/#c","text":"Format on Save Lint? Extensions: Omnisharp C# C# xml Documentation Comments (Keisuke Kato) RestClient (Huachao Mao)","title":"C"},{"location":"working/#angular","text":"Format on Save Extensions: Angular Essentials (Jhon Papa) Angular Lanfuage Service Prettier ESLint sort-imports (VSC Sort Import)","title":"Angular"},{"location":"working/#commit-message-format","text":"https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-format This specification is inspired by and supersedes the [AngularJS commit message format][commit-message-format]. We have very precise rules over how our Git commit messages must be formatted. This format leads to easier to read commit history . Each commit message consists of a header , a body , and a footer . <header> <BLANK LINE> <body> <BLANK LINE> <footer> The header is mandatory and must conform to the Commit Message Header format. The body is mandatory for all commits except for those of type \"docs\". When the body is present it must be at least 20 characters long and must conform to the Commit Message Body format. The footer is optional. The Commit Message Footer format describes what the footer is used for and the structure it must have.","title":" Commit Message Format"},{"location":"working/#commit-message-header","text":"<type>(<scope>): <short summary> \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Summary in present tense. Not capitalized. No period at the end. \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Commit Scope: animations|bazel|benchpress|common|compiler|compiler-cli|core| \u2502 elements|forms|http|language-service|localize|platform-browser| \u2502 platform-browser-dynamic|platform-server|router|service-worker| \u2502 upgrade|zone.js|packaging|changelog|docs-infra|migrations|ngcc|ve| \u2502 devtools \u2502 \u2514\u2500\u2af8 Commit Type: build|ci|docs|feat|fix|perf|refactor|test The <type> and <summary> fields are mandatory, the (<scope>) field is optional.","title":"Commit Message Header"},{"location":"working/#type","text":"Must be one of the following: build : Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm) ci : Changes to our CI configuration files and scripts (examples: CircleCi, SauceLabs) docs : Documentation only changes feat : A new feature fix : A bug fix perf : A code change that improves performance refactor : A code change that neither fixes a bug nor adds a feature test : Adding missing tests or correcting existing tests","title":"Type"}]}